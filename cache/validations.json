{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0bf6b0d74f581fdf94ed9a5fac0eff535bc519c71082aab0909626fc38f767cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "60738137eda170e6ab4db5939b85b7f3f79c9777b62648ef1c22985b82d3341e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f14dd89d8633b92e97909e42300bd7f62085530187d543cffb928a9dfa5f9eda",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:DAFIFlashLoan": {
        "src": "contracts/DAFIFlashLoan.sol:20",
        "version": {
          "withMetadata": "988d36821e6d078efb795b6559dc382b84dbfa859ee99527fc5837230da5e58a",
          "withoutMetadata": "c625ebe05d97ebd036795da22451381c98b72f66cd6868f70fc8b0077e3e4d16",
          "linkedWithoutMetadata": "c625ebe05d97ebd036795da22451381c98b72f66cd6868f70fc8b0077e3e4d16"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initializeReserve(address,uint256)",
          "addFlashLoanProvider(address)",
          "removeFlashLoanProvider(address)",
          "executeFlashLoan(address,address[],uint256[],bytes)",
          "provideFlashLoanLiquidity(address,uint256)",
          "withdrawFlashLoanLiquidity(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "reserves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(ReserveData)1385_storage)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:31"
            },
            {
              "label": "flashLoanProviders",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ReserveData)1385_storage)": {
              "label": "mapping(address => struct DAFIFlashLoan.ReserveData)",
              "numberOfBytes": "32"
            },
            "t_struct(ReserveData)1385_storage": {
              "label": "struct DAFIFlashLoan.ReserveData",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "availableLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "flashLoanFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:IFlashLoanReceiver": {
        "src": "contracts/DAFIFlashLoan.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockFlashLoanReceiver.sol:MockFlashLoanReceiver": {
        "src": "contracts/mocks/MockFlashLoanReceiver.sol:8",
        "version": {
          "withMetadata": "1a3b779cd98d22411c90f901a2d2e3c2de1a61e84baf719a584a0eca59c3162e",
          "withoutMetadata": "fcf27a65f4a6ad72aa07c99215a383b6734e6b8c3a0d6f9a6f78f16c75898d73",
          "linkedWithoutMetadata": "fcf27a65f4a6ad72aa07c99215a383b6734e6b8c3a0d6f9a6f78f16c75898d73"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "setShouldRepay(bool)",
          "onTokenTransfer(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockFlashLoanReceiver",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FLASH_LOAN",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "shouldRepay",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockFlashLoanReceiver",
              "src": "contracts/mocks/MockFlashLoanReceiver.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "cebe47e6471551e970bf42c275a107a2213afab00d881b324446a04ca230d8d5",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0bf6b0d74f581fdf94ed9a5fac0eff535bc519c71082aab0909626fc38f767cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "60738137eda170e6ab4db5939b85b7f3f79c9777b62648ef1c22985b82d3341e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:7",
        "version": {
          "withMetadata": "9b037332c305e222ffc3849c69ece6e25692420fbbf4dc328a0dd822c002c4f8",
          "withoutMetadata": "a67c51d0723f8767f1e931c967d2b007d107e7a5b1b4bd2a4c12b48e3a724c63",
          "linkedWithoutMetadata": "a67c51d0723f8767f1e931c967d2b007d107e7a5b1b4bd2a4c12b48e3a724c63"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)",
          "approve(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0bf6b0d74f581fdf94ed9a5fac0eff535bc519c71082aab0909626fc38f767cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "60738137eda170e6ab4db5939b85b7f3f79c9777b62648ef1c22985b82d3341e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f14dd89d8633b92e97909e42300bd7f62085530187d543cffb928a9dfa5f9eda",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:DAFIFlashLoan": {
        "src": "contracts/DAFIFlashLoan.sol:20",
        "version": {
          "withMetadata": "988d36821e6d078efb795b6559dc382b84dbfa859ee99527fc5837230da5e58a",
          "withoutMetadata": "c625ebe05d97ebd036795da22451381c98b72f66cd6868f70fc8b0077e3e4d16",
          "linkedWithoutMetadata": "c625ebe05d97ebd036795da22451381c98b72f66cd6868f70fc8b0077e3e4d16"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "()",
          "initializeReserve(address,uint256)",
          "addFlashLoanProvider(address)",
          "removeFlashLoanProvider(address)",
          "executeFlashLoan(address,address[],uint256[],bytes)",
          "provideFlashLoanLiquidity(address,uint256)",
          "withdrawFlashLoanLiquidity(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "reserves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(ReserveData)1385_storage)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:31"
            },
            {
              "label": "flashLoanProviders",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:32"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(ReserveData)1385_storage)": {
              "label": "mapping(address => struct DAFIFlashLoan.ReserveData)",
              "numberOfBytes": "32"
            },
            "t_struct(ReserveData)1385_storage": {
              "label": "struct DAFIFlashLoan.ReserveData",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "availableLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "flashLoanFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:IFlashLoanReceiver": {
        "src": "contracts/DAFIFlashLoan.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockFlashLoanReceiver.sol:MockFlashLoanReceiver": {
        "src": "contracts/mocks/MockFlashLoanReceiver.sol:8",
        "version": {
          "withMetadata": "59a34fa36ac98b0def9571f80d547f815d616019b06ee029c77adf017de9260e",
          "withoutMetadata": "766ccd2abec52e9f9b46a35862cae47c7a3bd7b44d8b40eb08af0cdc88cd6052",
          "linkedWithoutMetadata": "766ccd2abec52e9f9b46a35862cae47c7a3bd7b44d8b40eb08af0cdc88cd6052"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "setShouldRepay(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockFlashLoanReceiver",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FLASH_LOAN",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "shouldRepay",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockFlashLoanReceiver",
              "src": "contracts/mocks/MockFlashLoanReceiver.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "cebe47e6471551e970bf42c275a107a2213afab00d881b324446a04ca230d8d5",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0bf6b0d74f581fdf94ed9a5fac0eff535bc519c71082aab0909626fc38f767cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "60738137eda170e6ab4db5939b85b7f3f79c9777b62648ef1c22985b82d3341e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "d66de6583cbd797c5e59685f3b24fd352c4b64cd212601850cb2a32da4b4f54c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f14dd89d8633b92e97909e42300bd7f62085530187d543cffb928a9dfa5f9eda",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIVault.sol:DAFIVault": {
        "src": "contracts/DAFIVault.sol:20",
        "version": {
          "withMetadata": "33c574a04bf0db44523cbef4cc98deb1c0635520ce80237e5f97aa43d7c0b768",
          "withoutMetadata": "9d1bbbb6e54cdcf5d38b3071197427ed1a3fa94a537f3fe01278b040f361b8a3",
          "linkedWithoutMetadata": "9d1bbbb6e54cdcf5d38b3071197427ed1a3fa94a537f3fe01278b040f361b8a3"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,string,string)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "addStrategy(address,uint256)",
          "updateStrategy(uint256,uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "totalAssets()",
          "setWithdrawalFee(uint256)",
          "setPerformanceFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFIVault",
            "src": "contracts/DAFIVault.sol:52"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/DAFIVault.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "withdrawalFee",
            "src": "contracts/DAFIVault.sol:36"
          },
          {
            "kind": "state-variable-assignment",
            "name": "performanceFee",
            "src": "contracts/DAFIVault.sol:37"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "strategies",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(StrategyInfo)2871_storage)",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:31"
            },
            {
              "label": "strategyCount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:32"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:36"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:37"
            },
            {
              "label": "harvestThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:38"
            },
            {
              "label": "lastHarvest",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:39"
            },
            {
              "label": "totalInvested",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:41"
            },
            {
              "label": "depositTimestamp",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)2850": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StrategyInfo)2871_storage)": {
              "label": "mapping(uint256 => struct DAFIVault.StrategyInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StrategyInfo)2871_storage": {
              "label": "struct DAFIVault.StrategyInfo",
              "members": [
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)2850",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIVault.sol:IStrategy": {
        "src": "contracts/DAFIVault.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "invest(uint256)",
          "withdraw(uint256)",
          "harvest()",
          "totalInvested()",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0bf6b0d74f581fdf94ed9a5fac0eff535bc519c71082aab0909626fc38f767cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "60738137eda170e6ab4db5939b85b7f3f79c9777b62648ef1c22985b82d3341e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f14dd89d8633b92e97909e42300bd7f62085530187d543cffb928a9dfa5f9eda",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:DAFIFlashLoan": {
        "src": "contracts/DAFIFlashLoan.sol:19",
        "version": {
          "withMetadata": "59f6f844829b262ab03fb796338279c2879fb74d01155fc29b51901ff97a7650",
          "withoutMetadata": "0dc43dca6d103ca502437d57ea211ca20cfcd84989cec7bea7cf77fda0651546",
          "linkedWithoutMetadata": "0dc43dca6d103ca502437d57ea211ca20cfcd84989cec7bea7cf77fda0651546"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "()",
          "initializeReserve(address,uint256)",
          "executeFlashLoan(address,address[],uint256[],bytes)",
          "provideFlashLoanLiquidity(address,uint256)",
          "withdrawFlashLoanLiquidity(address,uint256)",
          "addFlashLoanProvider(address)",
          "removeFlashLoanProvider(address)",
          "updateFlashLoanFee(address,uint256)",
          "getFlashLoanFee(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "defaultFlashLoanFee",
            "src": "contracts/DAFIFlashLoan.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "reserves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(FlashLoanReserve)1380_storage)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:29"
            },
            {
              "label": "flashLoanProviders",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:30"
            },
            {
              "label": "defaultFlashLoanFee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(FlashLoanReserve)1380_storage)": {
              "label": "mapping(address => struct DAFIFlashLoan.FlashLoanReserve)",
              "numberOfBytes": "32"
            },
            "t_struct(FlashLoanReserve)1380_storage": {
              "label": "struct DAFIFlashLoan.FlashLoanReserve",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "availableLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "flashLoanFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:IFlashLoanReceiver": {
        "src": "contracts/DAFIFlashLoan.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockFlashLoanReceiver.sol:MockFlashLoanReceiver": {
        "src": "contracts/mocks/MockFlashLoanReceiver.sol:8",
        "version": {
          "withMetadata": "cfb21b2eb3e1cce843e8e8f882a8c0404d2488f9003d804550dd5e01a90d772f",
          "withoutMetadata": "766ccd2abec52e9f9b46a35862cae47c7a3bd7b44d8b40eb08af0cdc88cd6052",
          "linkedWithoutMetadata": "766ccd2abec52e9f9b46a35862cae47c7a3bd7b44d8b40eb08af0cdc88cd6052"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "setShouldRepay(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockFlashLoanReceiver",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FLASH_LOAN",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "shouldRepay",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockFlashLoanReceiver",
              "src": "contracts/mocks/MockFlashLoanReceiver.sol:12"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    },
    {
      "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:50",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/Governor.sol:Governor": {
        "src": "@openzeppelin/contracts/governance/Governor.sol:28",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA",
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "()",
          "supportsInterface(bytes4)",
          "name()",
          "version()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalThreshold()",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)",
          "relay(address,uint256,bytes)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Governor",
            "src": "@openzeppelin/contracts/governance/Governor.sol:84"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor": {
        "src": "@openzeppelin/contracts/governance/IGovernor.sol:14",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "version()",
          "clock()",
          "CLOCK_MODE()",
          "COUNTING_MODE()",
          "hashProposal(address[],uint256[],bytes[],bytes32)",
          "state(uint256)",
          "proposalSnapshot(uint256)",
          "proposalDeadline(uint256)",
          "proposalProposer(uint256)",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "getVotes(address,uint256)",
          "getVotesWithParams(address,uint256,bytes)",
          "hasVoted(uint256,address)",
          "propose(address[],uint256[],bytes[],string)",
          "execute(address[],uint256[],bytes[],bytes32)",
          "cancel(address[],uint256[],bytes[],bytes32)",
          "castVote(uint256,uint8)",
          "castVoteWithReason(uint256,uint8,string)",
          "castVoteWithReasonAndParams(uint256,uint8,string,bytes)",
          "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)",
          "castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/TimelockController.sol:TimelockController": {
        "src": "@openzeppelin/contracts/governance/TimelockController.sol:25",
        "version": {
          "withMetadata": "751b16a3b13b8ce8f14b97797604222a6661d0617d157263ff7933bc880638fd",
          "withoutMetadata": "751b16a3b13b8ce8f14b97797604222a6661d0617d157263ff7933bc880638fd",
          "linkedWithoutMetadata": "751b16a3b13b8ce8f14b97797604222a6661d0617d157263ff7933bc880638fd"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,address[],address[],address)",
          "()",
          "supportsInterface(bytes4)",
          "isOperation(bytes32)",
          "isOperationPending(bytes32)",
          "isOperationReady(bytes32)",
          "isOperationDone(bytes32)",
          "getTimestamp(bytes32)",
          "getMinDelay()",
          "hashOperation(address,uint256,bytes,bytes32,bytes32)",
          "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "schedule(address,uint256,bytes,bytes32,bytes32,uint256)",
          "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)",
          "cancel(bytes32)",
          "execute(address,uint256,bytes,bytes32,bytes32)",
          "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)",
          "updateDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimelockController",
            "src": "@openzeppelin/contracts/governance/TimelockController.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_timestamps",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_uint256)",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:32"
            },
            {
              "label": "_minDelay",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "TimelockController",
              "src": "@openzeppelin/contracts/governance/TimelockController.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "COUNTING_MODE()",
          "hasVoted(uint256,address)",
          "proposalVotes(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3435_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3435_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3435_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "votingDelay()",
          "votingPeriod()",
          "proposalThreshold()",
          "setVotingDelay(uint256)",
          "setVotingPeriod(uint256)",
          "setProposalThreshold(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorSettings",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:26",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "state(uint256)",
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)",
          "updateTimelock(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorTimelockControl",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "6",
              "type": "t_contract(TimelockController)3414",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(TimelockController)3414": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:14",
        "inherit": [
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotes",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction": {
        "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:16",
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Checkpoints.sol:Checkpoints",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "quorumNumerator()",
          "quorumNumerator(uint256)",
          "quorumDenominator()",
          "quorum(uint256)",
          "updateQuorumNumerator(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernorVotesQuorumFraction",
            "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(Trace224)8328_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:22",
              "retypedFrom": "Checkpoints.History"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint224)8333_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint224[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint224)8333_storage": {
              "label": "struct Checkpoints.Checkpoint224",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(Trace224)8328_storage": {
              "label": "struct Checkpoints.Trace224",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint224)8333_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock": {
        "src": "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:13",
        "inherit": [
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "timelock()",
          "proposalEta(uint256)",
          "queue(address[],uint256[],bytes[],bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes": {
        "src": "@openzeppelin/contracts/governance/utils/IVotes.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC5805.sol:IERC5805": {
        "src": "@openzeppelin/contracts/interfaces/IERC5805.sol:9",
        "inherit": [
          "@openzeppelin/contracts/governance/utils/IVotes.sol:IVotes",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372": {
        "src": "@openzeppelin/contracts/interfaces/IERC6372.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "clock()",
          "CLOCK_MODE()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:20",
        "version": {
          "withMetadata": "d5730419be53027e6d1e53d2798b7401676a48c3a1eac93171c9f99c3cd5c3a8",
          "withoutMetadata": "a57931f2848983428f1d0525011c931532695b14fd916005e6624bf6e9e1730e",
          "linkedWithoutMetadata": "a57931f2848983428f1d0525011c931532695b14fd916005e6624bf6e9e1730e"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:14",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:14",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:16",
        "version": {
          "withMetadata": "b07bb173284e0969d0121d1d025e4555ae36512e66e660dec9056e9ec626acc1",
          "withoutMetadata": "5c7f155534d10a5c47f74861648096c85fe552dcaefd3a7a91829483944e3afe",
          "linkedWithoutMetadata": "5c7f155534d10a5c47f74861648096c85fe552dcaefd3a7a91829483944e3afe"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38",
        "version": {
          "withMetadata": "cebe47e6471551e970bf42c275a107a2213afab00d881b324446a04ca230d8d5",
          "withoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc",
          "linkedWithoutMetadata": "b88954434c1323bef884c814f309755275a30d00fbd7290dedb8d43b871933fc"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol:42",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "0bf6b0d74f581fdf94ed9a5fac0eff535bc519c71082aab0909626fc38f767cf",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "60738137eda170e6ab4db5939b85b7f3f79c9777b62648ef1c22985b82d3341e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Checkpoints.sol:Checkpoints": {
        "src": "@openzeppelin/contracts/utils/Checkpoints.sol:19",
        "version": {
          "withMetadata": "3c983dc076785c122adda8ec2c11dd6fa291a7c3971da074d2f249f57f7d5e4a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings": {
        "src": "@openzeppelin/contracts/utils/ShortStrings.sol:40",
        "version": {
          "withMetadata": "6f491232168984a9c9830850db9059c7c809152340e00f970357ba6fb94fe693",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin/contracts/utils/StorageSlot.sol:34",
        "version": {
          "withMetadata": "2ae80a2dff8e0a8444cab8af0a503fc445c4025052ade01c57f4223f467ca29b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "8466188f2028b9331279687cf4380bac027b4feb584d10c0c0c1f89054330c11",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:14",
        "version": {
          "withMetadata": "624ae7fe80ab424203d58e3fbb5e3ca264fca553a5a38eca8c4b9bf0d6636c47",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712": {
        "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/ShortStrings.sol:ShortStrings",
          "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "EIP712",
            "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:67"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "d66de6583cbd797c5e59685f3b24fd352c4b64cd212601850cb2a32da4b4f54c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:22",
        "version": {
          "withMetadata": "efd175217e64b2328fbcaba72100c468e30b30cd8e7dea8106dfd74d5b287d04",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "f14dd89d8633b92e97909e42300bd7f62085530187d543cffb928a9dfa5f9eda",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "8b7572026f5ff9316e7c267d6b17324c5c44edc81e9c5a5ead08d470bd1ca41f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:DoubleEndedQueue": {
        "src": "@openzeppelin/contracts/utils/structs/DoubleEndedQueue.sol:21",
        "version": {
          "withMetadata": "89665e69436be0deb22287e0a22e3d6e96c1f90966ddaff2d4eea543e860576f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/CropToken.sol:CropToken": {
        "src": "contracts/CropToken.sol:7",
        "version": {
          "withMetadata": "74a42134e8ccfbd3589210e6199a4be9af32d66f9a71138542da1b5a30d00290",
          "withoutMetadata": "fd61d4851ca872d8d7389a6cfcf02323c4b34a7cdc1f0c1b82eb005675e613f9",
          "linkedWithoutMetadata": "fd61d4851ca872d8d7389a6cfcf02323c4b34a7cdc1f0c1b82eb005675e613f9"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CropToken",
            "src": "contracts/CropToken.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:DAFIFlashLoan": {
        "src": "contracts/DAFIFlashLoan.sol:19",
        "version": {
          "withMetadata": "59f6f844829b262ab03fb796338279c2879fb74d01155fc29b51901ff97a7650",
          "withoutMetadata": "0dc43dca6d103ca502437d57ea211ca20cfcd84989cec7bea7cf77fda0651546",
          "linkedWithoutMetadata": "0dc43dca6d103ca502437d57ea211ca20cfcd84989cec7bea7cf77fda0651546"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "()",
          "initializeReserve(address,uint256)",
          "executeFlashLoan(address,address[],uint256[],bytes)",
          "provideFlashLoanLiquidity(address,uint256)",
          "withdrawFlashLoanLiquidity(address,uint256)",
          "addFlashLoanProvider(address)",
          "removeFlashLoanProvider(address)",
          "updateFlashLoanFee(address,uint256)",
          "getFlashLoanFee(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "defaultFlashLoanFee",
            "src": "contracts/DAFIFlashLoan.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "reserves",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_struct(FlashLoanReserve)13782_storage)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:29"
            },
            {
              "label": "flashLoanProviders",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:30"
            },
            {
              "label": "defaultFlashLoanFee",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "DAFIFlashLoan",
              "src": "contracts/DAFIFlashLoan.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(FlashLoanReserve)13782_storage)": {
              "label": "mapping(address => struct DAFIFlashLoan.FlashLoanReserve)",
              "numberOfBytes": "32"
            },
            "t_struct(FlashLoanReserve)13782_storage": {
              "label": "struct DAFIFlashLoan.FlashLoanReserve",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "availableLiquidity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "flashLoanFee",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIFlashLoan.sol:IFlashLoanReceiver": {
        "src": "contracts/DAFIFlashLoan.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "executeOperation(address[],uint256[],uint256[],address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIGovernance.sol:DAFIGovernance": {
        "src": "contracts/DAFIGovernance.sol:11",
        "version": {
          "withMetadata": "39f01cc8c996ffb24e0323dfe0e8c0e9a760dd675b39b649d8edf1846181f630",
          "withoutMetadata": "c181add16f5be78881e7a4beb71ab0d000ab380187dcaf1c9ccc2887ce867dc3",
          "linkedWithoutMetadata": "c181add16f5be78881e7a4beb71ab0d000ab380187dcaf1c9ccc2887ce867dc3"
        },
        "inherit": [
          "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:GovernorTimelockControl",
          "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:GovernorVotesQuorumFraction",
          "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol:GovernorVotes",
          "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:GovernorCountingSimple",
          "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:GovernorSettings",
          "@openzeppelin/contracts/governance/Governor.sol:Governor",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts/governance/extensions/IGovernorTimelock.sol:IGovernorTimelock",
          "@openzeppelin/contracts/governance/IGovernor.sol:IGovernor",
          "@openzeppelin/contracts/interfaces/IERC6372.sol:IERC6372",
          "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "proposalThreshold()",
          "votingDelay()",
          "votingPeriod()",
          "quorum(uint256)",
          "state(uint256)",
          "propose(address[],uint256[],bytes[],string,uint8)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFIGovernance",
            "src": "contracts/DAFIGovernance.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_nameFallback",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:52"
            },
            {
              "label": "_versionFallback",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "EIP712",
              "src": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:53"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:50"
            },
            {
              "label": "_proposals",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:53",
              "retypedFrom": "mapping(uint256 => Governor.ProposalCore)"
            },
            {
              "label": "_governanceCall",
              "offset": 0,
              "slot": "4",
              "type": "t_struct(Bytes32Deque)13362_storage",
              "contract": "Governor",
              "src": "@openzeppelin/contracts/governance/Governor.sol:59"
            },
            {
              "label": "_votingDelay",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:14"
            },
            {
              "label": "_votingPeriod",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:15"
            },
            {
              "label": "_proposalThreshold",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "GovernorSettings",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorSettings.sol:16"
            },
            {
              "label": "_proposalVotes",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(ProposalVote)3435_storage)",
              "contract": "GovernorCountingSimple",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorCountingSimple.sol:30"
            },
            {
              "label": "_quorumNumerator",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:19"
            },
            {
              "label": "_quorumNumeratorHistory",
              "offset": 0,
              "slot": "11",
              "type": "t_struct(Trace224)8328_storage",
              "contract": "GovernorVotesQuorumFraction",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorVotesQuorumFraction.sol:22",
              "retypedFrom": "Checkpoints.History"
            },
            {
              "label": "_timelock",
              "offset": 0,
              "slot": "12",
              "type": "t_contract(TimelockController)3414",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:27"
            },
            {
              "label": "_timelockIds",
              "offset": 0,
              "slot": "13",
              "type": "t_mapping(t_uint256,t_bytes32)",
              "contract": "GovernorTimelockControl",
              "src": "@openzeppelin/contracts/governance/extensions/GovernorTimelockControl.sol:28"
            },
            {
              "label": "proposalTypes",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_uint256,t_enum(ProposalType)14405)",
              "contract": "DAFIGovernance",
              "src": "contracts/DAFIGovernance.sol:26"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Checkpoint224)8333_storage)dyn_storage": {
              "label": "struct Checkpoints.Checkpoint224[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes24": {
              "label": "bytes24",
              "numberOfBytes": "24"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_bytes4": {
              "label": "bytes4",
              "numberOfBytes": "4"
            },
            "t_contract(TimelockController)3414": {
              "label": "contract TimelockController",
              "numberOfBytes": "20"
            },
            "t_enum(ProposalType)14405": {
              "label": "enum DAFIGovernance.ProposalType",
              "members": [
                "GENERAL",
                "FARMER_VERIFICATION",
                "PARAMETER_CHANGE",
                "EMERGENCY_ACTION"
              ],
              "numberOfBytes": "1"
            },
            "t_int128": {
              "label": "int128",
              "numberOfBytes": "16"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_int128,t_bytes32)": {
              "label": "mapping(int128 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_bytes32)": {
              "label": "mapping(uint256 => bytes32)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_enum(ProposalType)14405)": {
              "label": "mapping(uint256 => enum DAFIGovernance.ProposalType)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalCore)601_storage)": {
              "label": "mapping(uint256 => struct Governor.ProposalCore)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(ProposalVote)3435_storage)": {
              "label": "mapping(uint256 => struct GovernorCountingSimple.ProposalVote)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Bytes32Deque)13362_storage": {
              "label": "struct DoubleEndedQueue.Bytes32Deque",
              "members": [
                {
                  "label": "_begin",
                  "type": "t_int128",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_end",
                  "type": "t_int128",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "_data",
                  "type": "t_mapping(t_int128,t_bytes32)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Checkpoint224)8333_storage": {
              "label": "struct Checkpoints.Checkpoint224",
              "members": [
                {
                  "label": "_key",
                  "type": "t_uint32",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_value",
                  "type": "t_uint224",
                  "offset": 4,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ProposalCore)601_storage": {
              "label": "struct Governor.ProposalCore",
              "members": [
                {
                  "label": "voteStart",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "proposer",
                  "type": "t_address",
                  "offset": 8,
                  "slot": "0"
                },
                {
                  "label": "__gap_unused0",
                  "type": "t_bytes4",
                  "offset": 28,
                  "slot": "0"
                },
                {
                  "label": "voteEnd",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "__gap_unused1",
                  "type": "t_bytes24",
                  "offset": 8,
                  "slot": "1"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "canceled",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(ProposalVote)3435_storage": {
              "label": "struct GovernorCountingSimple.ProposalVote",
              "members": [
                {
                  "label": "againstVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "forVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "abstainVotes",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "hasVoted",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Trace224)8328_storage": {
              "label": "struct Checkpoints.Trace224",
              "members": [
                {
                  "label": "_checkpoints",
                  "type": "t_array(t_struct(Checkpoint224)8333_storage)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint224": {
              "label": "uint224",
              "numberOfBytes": "28"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFILending.sol:DAFILending": {
        "src": "contracts/DAFILending.sol:10",
        "version": {
          "withMetadata": "0087783dd5a2e3a95f16e70140d7bf672bbfb3f4b6491b87f6b03e93804259ea",
          "withoutMetadata": "a4ff565480a5654a850071f7cc9e644397e6949b98823b63e89a401155f37d54",
          "linkedWithoutMetadata": "a4ff565480a5654a850071f7cc9e644397e6949b98823b63e89a401155f37d54"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "(address,address,uint256,uint256,uint256)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "createLoan(uint256,uint256,uint256,uint256)",
          "repayLoan(uint256)",
          "liquidateLoan(uint256)",
          "calculateInterestRate()",
          "calculateInterest(uint256)",
          "isLoanDefaulted(uint256)",
          "getCollateralValue(uint256,uint256)",
          "claimRewards()",
          "updatePoolParameters(uint256,uint256,uint256,uint256,uint256)",
          "pausePool()",
          "unpausePool()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFILending",
            "src": "contracts/DAFILending.sol:55"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "usdcToken",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20)7002",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:36"
            },
            {
              "label": "farmAssetToken",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IERC1155)6196",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:37"
            },
            {
              "label": "loans",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(Loan)14674_storage)",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:39"
            },
            {
              "label": "deposits",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:40"
            },
            {
              "label": "rewards",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:41"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "7",
              "type": "t_struct(LendingPool)14691_storage",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:43"
            },
            {
              "label": "loanCount",
              "offset": 0,
              "slot": "15",
              "type": "t_uint256",
              "contract": "DAFILending",
              "src": "contracts/DAFILending.sol:44"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC1155)6196": {
              "label": "contract IERC1155",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)7002": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Loan)14674_storage)": {
              "label": "mapping(uint256 => struct DAFILending.Loan)",
              "numberOfBytes": "32"
            },
            "t_struct(LendingPool)14691_storage": {
              "label": "struct DAFILending.LendingPool",
              "members": [
                {
                  "label": "totalDeposited",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "totalBorrowed",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "minLoanDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxLoanDuration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "baseInterestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "utilizationMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "collateralRatio",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_struct(Loan)14674_storage": {
              "label": "struct DAFILending.Loan",
              "members": [
                {
                  "label": "borrower",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collateralTokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "loanAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "interestRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "defaulted",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFILiquidityMining.sol:DAFILiquidityMining": {
        "src": "contracts/DAFILiquidityMining.sol:9",
        "version": {
          "withMetadata": "6b2e516db0c15c7d94b19bd4950b15761fc3cd889397f4365975ffe3bd7ef0de",
          "withoutMetadata": "ef210ee64bb6000cf197a07e23236c96d063ea015764d92305655ac06dd0be86",
          "linkedWithoutMetadata": "ef210ee64bb6000cf197a07e23236c96d063ea015764d92305655ac06dd0be86"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "(address,uint256,uint256)",
          "addPool(uint256,address,bool)",
          "updatePool(uint256)",
          "deposit(uint256,uint256,uint256)",
          "withdraw(uint256,uint256)",
          "calculateBoost(uint256)",
          "pendingReward(uint256,address)",
          "massUpdatePools()",
          "setRewardPerBlock(uint256)",
          "updatePoolAllocPoint(uint256,uint256,bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFILiquidityMining",
            "src": "contracts/DAFILiquidityMining.sol:46"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "rewardToken",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20)7002",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:27"
            },
            {
              "label": "rewardPerBlock",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:28"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_struct(Pool)15548_storage)dyn_storage",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:32"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15557_storage))",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:33"
            },
            {
              "label": "userTotalStaked",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:34"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:36"
            },
            {
              "label": "startBlock",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DAFILiquidityMining",
              "src": "contracts/DAFILiquidityMining.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(Pool)15548_storage)dyn_storage": {
              "label": "struct DAFILiquidityMining.Pool[]",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)7002": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)15557_storage)": {
              "label": "mapping(address => struct DAFILiquidityMining.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)15557_storage))": {
              "label": "mapping(uint256 => mapping(address => struct DAFILiquidityMining.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(Pool)15548_storage": {
              "label": "struct DAFILiquidityMining.Pool",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)7002",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accRewardPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)15557_storage": {
              "label": "struct DAFILiquidityMining.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "boostMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lockEndBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIMarketplace.sol:DAFIMarketplace": {
        "src": "contracts/DAFIMarketplace.sol:10",
        "version": {
          "withMetadata": "a2f5962ded290383e7e5ba7ed6b22f9d874143cfc2b30a6e0db6088910ad3681",
          "withoutMetadata": "c8354db4917bdbebfddb7cbde097b0b53b1aca2c5a6b4dc9af8e76a9673db96c",
          "linkedWithoutMetadata": "c8354db4917bdbebfddb7cbde097b0b53b1aca2c5a6b4dc9af8e76a9673db96c"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:ERC1155Holder",
          "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:ERC1155Receiver",
          "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:IERC1155Receiver",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createListing(uint256,uint256,uint256)",
          "makeOffer(uint256,uint256,uint256)",
          "acceptOffer(uint256,address)",
          "cancelListing(uint256)",
          "cancelOffer(uint256)",
          "updatePlatformFee(uint256)",
          "withdrawRewards()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFIMarketplace",
            "src": "contracts/DAFIMarketplace.sol:42"
          },
          {
            "kind": "state-variable-assignment",
            "name": "platformFee",
            "src": "contracts/DAFIMarketplace.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "usdcToken",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20)7002",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:11"
            },
            {
              "label": "farmAssetToken",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IERC1155)6196",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:12"
            },
            {
              "label": "listings",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(Listing)16401_storage)",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:29"
            },
            {
              "label": "offers",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16410_storage))",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:30"
            },
            {
              "label": "farmerRewards",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:31"
            },
            {
              "label": "listingCount",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:33"
            },
            {
              "label": "platformFee",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DAFIMarketplace",
              "src": "contracts/DAFIMarketplace.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC1155)6196": {
              "label": "contract IERC1155",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)7002": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(Offer)16410_storage)": {
              "label": "mapping(address => struct DAFIMarketplace.Offer)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(Offer)16410_storage))": {
              "label": "mapping(uint256 => mapping(address => struct DAFIMarketplace.Offer))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Listing)16401_storage)": {
              "label": "mapping(uint256 => struct DAFIMarketplace.Listing)",
              "numberOfBytes": "32"
            },
            "t_struct(Listing)16401_storage": {
              "label": "struct DAFIMarketplace.Listing",
              "members": [
                {
                  "label": "seller",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "pricePerUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Offer)16410_storage": {
              "label": "struct DAFIMarketplace.Offer",
              "members": [
                {
                  "label": "buyer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "pricePerUnit",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIPriceOracle.sol:DAFIPriceOracle": {
        "src": "contracts/DAFIPriceOracle.sol:8",
        "version": {
          "withMetadata": "f6d7d7930c634cb565b5cfd939dffdc7ff5add37f1d15d91b2dfafb062389687",
          "withoutMetadata": "0ad8bc11077d6ebaa0073b14ea32141a6c91282b5c07a74d6226ee26830554f8",
          "linkedWithoutMetadata": "0ad8bc11077d6ebaa0073b14ea32141a6c91282b5c07a74d6226ee26830554f8"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "submitPrice(bytes32,uint256,uint256)",
          "getPrice(bytes32)",
          "configureAsset(bytes32,uint256,uint256,address)",
          "addTrustedSource(bytes32,address)",
          "removeTrustedSource(bytes32,address)",
          "setMinimumSourceCount(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFIPriceOracle",
            "src": "contracts/DAFIPriceOracle.sol:37"
          },
          {
            "kind": "state-variable-assignment",
            "name": "minimumSourceCount",
            "src": "contracts/DAFIPriceOracle.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:56"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "1",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "prices",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_bytes32,t_struct(PriceData)16958_storage)",
              "contract": "DAFIPriceOracle",
              "src": "contracts/DAFIPriceOracle.sol:25"
            },
            {
              "label": "assetConfigs",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_bytes32,t_struct(AssetConfig)16967_storage)",
              "contract": "DAFIPriceOracle",
              "src": "contracts/DAFIPriceOracle.sol:26"
            },
            {
              "label": "trustedSources",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
              "contract": "DAFIPriceOracle",
              "src": "contracts/DAFIPriceOracle.sol:27"
            },
            {
              "label": "minimumSourceCount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "DAFIPriceOracle",
              "src": "contracts/DAFIPriceOracle.sol:30"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
              "label": "mapping(bytes32 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AssetConfig)16967_storage)": {
              "label": "mapping(bytes32 => struct DAFIPriceOracle.AssetConfig)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(PriceData)16958_storage)": {
              "label": "mapping(bytes32 => struct DAFIPriceOracle.PriceData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(AssetConfig)16967_storage": {
              "label": "struct DAFIPriceOracle.AssetConfig",
              "members": [
                {
                  "label": "isActive",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "heartbeat",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "deviationThreshold",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "chainlinkFeed",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(PriceData)16958_storage": {
              "label": "struct DAFIPriceOracle.PriceData",
              "members": [
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "timestamp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "confidence",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_struct(RoleData)65_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIToken.sol:DAFIToken": {
        "src": "contracts/DAFIToken.sol:8",
        "version": {
          "withMetadata": "2f2dc7de3a70bcd65ee691fd6d5efb239085d27e9b1dbd3375a4ae457441d992",
          "withoutMetadata": "62075325dd4434b08c57c47228d60bb78e2f86064197251040c5718bf6ba2c0c",
          "linkedWithoutMetadata": "62075325dd4434b08c57c47228d60bb78e2f86064197251040c5718bf6ba2c0c"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "verifyFarmer(address,string,bool,string,uint256)",
          "updateReputationScore(address,uint256)",
          "mint(address,uint256)",
          "burn(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFIToken",
            "src": "contracts/DAFIToken.sol:23"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "verifiedFarmers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "DAFIToken",
              "src": "contracts/DAFIToken.sol:9"
            },
            {
              "label": "farmerProfiles",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_struct(FarmerDetails)17445_storage)",
              "contract": "DAFIToken",
              "src": "contracts/DAFIToken.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(FarmerDetails)17445_storage)": {
              "label": "mapping(address => struct DAFIToken.FarmerDetails)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(FarmerDetails)17445_storage": {
              "label": "struct DAFIToken.FarmerDetails",
              "members": [
                {
                  "label": "did",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "reputationScore",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "isOrganic",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "location",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "landSize",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIVault.sol:DAFIVault": {
        "src": "contracts/DAFIVault.sol:20",
        "version": {
          "withMetadata": "350c0b7b4d5c5e29d53fdf3e4e97b9b336d80940471b47f7d6be4817c52fd2a1",
          "withoutMetadata": "a9841bf5c76bcb3bca9c5c1afc1c029b5448130e70c515710a15fad84c836713",
          "linkedWithoutMetadata": "a9841bf5c76bcb3bca9c5c1afc1c029b5448130e70c515710a15fad84c836713"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath",
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [
          "(address,string,string)",
          "deposit(uint256)",
          "withdraw(uint256)",
          "addStrategy(address,uint256)",
          "updateStrategy(uint256,uint256)",
          "harvest()",
          "emergencyWithdraw()",
          "totalAssets()",
          "setWithdrawalFee(uint256)",
          "setPerformanceFee(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DAFIVault",
            "src": "contracts/DAFIVault.sol:51"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/DAFIVault.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "withdrawalFee",
            "src": "contracts/DAFIVault.sol:35"
          },
          {
            "kind": "state-variable-assignment",
            "name": "performanceFee",
            "src": "contracts/DAFIVault.sol:36"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "strategies",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(StrategyInfo)17676_storage)",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:30"
            },
            {
              "label": "strategyCount",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:31"
            },
            {
              "label": "withdrawalFee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:35"
            },
            {
              "label": "performanceFee",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:36"
            },
            {
              "label": "harvestThreshold",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:37"
            },
            {
              "label": "lastHarvest",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:38"
            },
            {
              "label": "totalInvested",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:40"
            },
            {
              "label": "depositTimestamp",
              "offset": 0,
              "slot": "14",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "DAFIVault",
              "src": "contracts/DAFIVault.sol:41"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IStrategy)17659": {
              "label": "contract IStrategy",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(StrategyInfo)17676_storage)": {
              "label": "mapping(uint256 => struct DAFIVault.StrategyInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(StrategyInfo)17676_storage": {
              "label": "struct DAFIVault.StrategyInfo",
              "members": [
                {
                  "label": "strategy",
                  "type": "t_contract(IStrategy)17659",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocation",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DAFIVault.sol:IStrategy": {
        "src": "contracts/DAFIVault.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "invest(uint256)",
          "withdraw(uint256)",
          "harvest()",
          "totalInvested()",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/DerivativeContract.sol:DerivativeContract": {
        "src": "contracts/DerivativeContract.sol:7",
        "version": {
          "withMetadata": "301e1bac96903fe1489a7baf36a2606a3333c9f4bae13af1457a37ec76589133",
          "withoutMetadata": "16bd730bc443fe09a9a5662afa33279b5416b42deb25b82f0277afbd7cafc88c",
          "linkedWithoutMetadata": "16bd730bc443fe09a9a5662afa33279b5416b42deb25b82f0277afbd7cafc88c"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,uint256,uint256)",
          "settleDerivative(address)",
          "getCropTokenPrice()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DerivativeContract",
            "src": "contracts/DerivativeContract.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "cropToken",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)7002",
              "contract": "DerivativeContract",
              "src": "contracts/DerivativeContract.sol:8"
            },
            {
              "label": "strikePrice",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "DerivativeContract",
              "src": "contracts/DerivativeContract.sol:9"
            },
            {
              "label": "expirationTime",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "DerivativeContract",
              "src": "contracts/DerivativeContract.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)7002": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/FarmAssetToken.sol:FarmAssetToken": {
        "src": "contracts/FarmAssetToken.sol:8",
        "version": {
          "withMetadata": "ad613987a9353fa084691bc379ffed0af5527054bbcc95e486d32c19ec2669e2",
          "withoutMetadata": "ad613987a9353fa084691bc379ffed0af5527054bbcc95e486d32c19ec2669e2",
          "linkedWithoutMetadata": "ad613987a9353fa084691bc379ffed0af5527054bbcc95e486d32c19ec2669e2"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:ERC1155",
          "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:IERC1155MetadataURI",
          "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:IERC1155",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "tokenizeAsset(string,uint8,uint256,uint256,uint256)",
          "setInsurance(uint256,bool)",
          "updatePrice(uint256,uint256)",
          "getAssetDetails(uint256)",
          "setURI(string)",
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "FarmAssetToken",
            "src": "contracts/FarmAssetToken.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:24"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:27"
            },
            {
              "label": "_uri",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC1155",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:30"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "assets",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_struct(Asset)18725_storage)",
              "contract": "FarmAssetToken",
              "src": "contracts/FarmAssetToken.sol:21"
            },
            {
              "label": "_nextTokenId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "FarmAssetToken",
              "src": "contracts/FarmAssetToken.sol:22"
            },
            {
              "label": "usdcToken",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "FarmAssetToken",
              "src": "contracts/FarmAssetToken.sol:23"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_enum(AssetType)18709": {
              "label": "enum FarmAssetToken.AssetType",
              "members": [
                "CROP",
                "LIVESTOCK",
                "LAND"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Asset)18725_storage)": {
              "label": "mapping(uint256 => struct FarmAssetToken.Asset)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)18725_storage": {
              "label": "struct FarmAssetToken.Asset",
              "members": [
                {
                  "label": "name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "assetType",
                  "type": "t_enum(AssetType)18709",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "farmer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "quantity",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "maturityDate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "isInsured",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/InsuranceToken.sol:InsuranceToken": {
        "src": "contracts/InsuranceToken.sol:7",
        "version": {
          "withMetadata": "841fb313b90ec769afb416a94669d0d697d78c081a695cb04389644588f4cbe7",
          "withoutMetadata": "bbbf554f988b205291031dfd4c873edad97e6b81ce9407b3a263cdfb8fbcac12",
          "linkedWithoutMetadata": "bbbf554f988b205291031dfd4c873edad97e6b81ce9407b3a263cdfb8fbcac12"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setClaimable(bool)",
          "claimInsurance()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InsuranceToken",
            "src": "contracts/InsuranceToken.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "isClaimable",
            "src": "contracts/InsuranceToken.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "isClaimable",
              "offset": 20,
              "slot": "5",
              "type": "t_bool",
              "contract": "InsuranceToken",
              "src": "contracts/InsuranceToken.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/WeatherDerivatives.sol:WeatherDerivatives": {
        "src": "contracts/WeatherDerivatives.sol:9",
        "version": {
          "withMetadata": "915a78a8ca515e5b1ac8c43907a9335d59d295094899a2e4471ac853ef5133cc",
          "withoutMetadata": "0a3d6b36733e32b6b810e2fe2cec20dcb5de423179bb3f5edab5d596de2070aa",
          "linkedWithoutMetadata": "0a3d6b36733e32b6b810e2fe2cec20dcb5de423179bb3f5edab5d596de2070aa"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address)",
          "createWeatherContract(uint256,uint256,uint256,uint256)",
          "checkAndTriggerContract(uint256)",
          "expireContract(uint256)",
          "updatePremiumLimits(uint256,uint256)",
          "getContractDetails(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WeatherDerivatives",
            "src": "contracts/WeatherDerivatives.sol:41"
          },
          {
            "kind": "state-variable-assignment",
            "name": "minPremium",
            "src": "contracts/WeatherDerivatives.sol:27"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxPayout",
            "src": "contracts/WeatherDerivatives.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "usdcToken",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20)7002",
              "contract": "WeatherDerivatives",
              "src": "contracts/WeatherDerivatives.sol:10"
            },
            {
              "label": "weatherOracle",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(AggregatorV3Interface)45",
              "contract": "WeatherDerivatives",
              "src": "contracts/WeatherDerivatives.sol:11"
            },
            {
              "label": "weatherContracts",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_struct(WeatherContract)19090_storage)",
              "contract": "WeatherDerivatives",
              "src": "contracts/WeatherDerivatives.sol:25"
            },
            {
              "label": "contractCount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "WeatherDerivatives",
              "src": "contracts/WeatherDerivatives.sol:26"
            },
            {
              "label": "minPremium",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "WeatherDerivatives",
              "src": "contracts/WeatherDerivatives.sol:27"
            },
            {
              "label": "maxPayout",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "WeatherDerivatives",
              "src": "contracts/WeatherDerivatives.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(AggregatorV3Interface)45": {
              "label": "contract AggregatorV3Interface",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)7002": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(WeatherContract)19090_storage)": {
              "label": "mapping(uint256 => struct WeatherDerivatives.WeatherContract)",
              "numberOfBytes": "32"
            },
            "t_struct(WeatherContract)19090_storage": {
              "label": "struct WeatherDerivatives.WeatherContract",
              "members": [
                {
                  "label": "farmer",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "strikeTemp",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "duration",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "premium",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "payout",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "startTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "6"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "7"
                },
                {
                  "label": "claimed",
                  "type": "t_bool",
                  "offset": 1,
                  "slot": "7"
                }
              ],
              "numberOfBytes": "256"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/YieldFarming.sol:YieldFarming": {
        "src": "contracts/YieldFarming.sol:9",
        "version": {
          "withMetadata": "94f6fd5e5a5dd296ddc97159d76ad33cf128e4083d40ed2eb3cf95624dcaea5f",
          "withoutMetadata": "32dde7d5b089a0f10c5614e2fc132c546672690b93a8d6f55ed448b93aff8527",
          "linkedWithoutMetadata": "32dde7d5b089a0f10c5614e2fc132c546672690b93a8d6f55ed448b93aff8527"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeMath.sol:SafeMath"
        ],
        "methods": [
          "()",
          "createPool(address,address,uint256)",
          "stake(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "claimRewards(uint256)",
          "updatePool(uint256)",
          "calculateRewards(uint256,address)",
          "getUserInfo(uint256,address)",
          "setLockPeriod(uint256)",
          "updateRewardRate(uint256,uint256)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lockPeriod",
            "src": "contracts/YieldFarming.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "pools",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_struct(Pool)19474_storage)",
              "contract": "YieldFarming",
              "src": "contracts/YieldFarming.sol:29"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)19483_storage))",
              "contract": "YieldFarming",
              "src": "contracts/YieldFarming.sol:30"
            },
            {
              "label": "verifiedFarmers",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "YieldFarming",
              "src": "contracts/YieldFarming.sol:31"
            },
            {
              "label": "poolCount",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "YieldFarming",
              "src": "contracts/YieldFarming.sol:33"
            },
            {
              "label": "lockPeriod",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "YieldFarming",
              "src": "contracts/YieldFarming.sol:35"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)7002": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserInfo)19483_storage)": {
              "label": "mapping(address => struct YieldFarming.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)19483_storage))": {
              "label": "mapping(uint256 => mapping(address => struct YieldFarming.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Pool)19474_storage)": {
              "label": "mapping(uint256 => struct YieldFarming.Pool)",
              "numberOfBytes": "32"
            },
            "t_struct(Pool)19474_storage": {
              "label": "struct YieldFarming.Pool",
              "members": [
                {
                  "label": "stakingToken",
                  "type": "t_contract(IERC20)7002",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardToken",
                  "type": "t_contract(IERC20)7002",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "rewardRate",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "rewardPerTokenStored",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "totalStaked",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "5"
                },
                {
                  "label": "active",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "6"
                }
              ],
              "numberOfBytes": "224"
            },
            "t_struct(UserInfo)19483_storage": {
              "label": "struct YieldFarming.UserInfo",
              "members": [
                {
                  "label": "stakedAmount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastUpdateTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "unclaimedRewards",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts/mocks/MockERC20.sol:6",
        "version": {
          "withMetadata": "2159eb5970b01a5232b350d06a8c4352de5187625a3ecba98aae8e7ce17faa02",
          "withoutMetadata": "fa0163eeffe013401f4b10ec70e0c722fa83607d4e7d9de19f15ef35cb1a1164",
          "linkedWithoutMetadata": "fa0163eeffe013401f4b10ec70e0c722fa83607d4e7d9de19f15ef35cb1a1164"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "mint(address,uint256)",
          "burn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts/mocks/MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:45"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockFlashLoanReceiver.sol:MockFlashLoanReceiver": {
        "src": "contracts/mocks/MockFlashLoanReceiver.sol:7",
        "version": {
          "withMetadata": "c98a23b3366fbbf548f4cfddcceeb90f5cc803798db37e8fbdde7d95a89c930b",
          "withoutMetadata": "e1e9fe6a6324523723e5cf57d19fa29bd3087b310c3f50249d5c938d70e435ce",
          "linkedWithoutMetadata": "e1e9fe6a6324523723e5cf57d19fa29bd3087b310c3f50249d5c938d70e435ce"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address)",
          "executeOperation(address[],uint256[],uint256[],address,bytes)",
          "setShouldRepay(bool)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockFlashLoanReceiver",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "FLASH_LOAN",
            "src": "contracts/mocks/MockFlashLoanReceiver.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "shouldRepay",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "MockFlashLoanReceiver",
              "src": "contracts/mocks/MockFlashLoanReceiver.sol:9"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      },
      "contracts/mocks/MockStrategy.sol:MockStrategy": {
        "src": "contracts/mocks/MockStrategy.sol:7",
        "version": {
          "withMetadata": "951e64a5b37cdaf3630c2551d952b63948b3f81210da41f0cc1bef5dda085c1b",
          "withoutMetadata": "6f118b48186b18c89b0e5b2ad532bd74f688f297a700d7ee348a4dac6172e3e1",
          "linkedWithoutMetadata": "6f118b48186b18c89b0e5b2ad532bd74f688f297a700d7ee348a4dac6172e3e1"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address)",
          "invest(uint256)",
          "withdraw(uint256)",
          "harvest()",
          "totalInvested()",
          "emergencyWithdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockStrategy",
            "src": "contracts/mocks/MockStrategy.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "token",
            "src": "contracts/mocks/MockStrategy.sol:8"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "totalInvestedAmount",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "MockStrategy",
              "src": "contracts/mocks/MockStrategy.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.19"
      }
    }
  ]
}